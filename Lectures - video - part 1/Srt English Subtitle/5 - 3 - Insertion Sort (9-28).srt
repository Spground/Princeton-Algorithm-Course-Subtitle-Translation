1
00:00:01,072 --> 00:00:06,008
现在，我们来看另一个基本的插入排序方法，
Now, we look at insertion sort which is
another elementary method and

2
00:00:06,008 --> 00:00:10,033
有意思的是它和选择排序的效果和特点截然不同。
interestingly has quite different
performance, characteristics than

3
00:00:10,033 --> 00:00:16,059

selection sort. Let's look at a demo of
insertion sort. For insertion sort, what

4
00:00:16,059 --> 00:00:22,009
we're going to do is we'll move an index i
from left to right as before. But now, in

5
00:00:22,009 --> 00:00:27,052
the ith iteration we're going to move a(i)
into position among the elements to its

6
00:00:27,052 --> 00:00:37,620
left. Let's look at how that works on our
example with cards. So now we start by

7
00:00:38,007 --> 00:00:43,302
initializing i to first card and we take
the idea that everything from i to its

8
00:00:43,302 --> 00:00:48,621
left is going to be sorted and everything
from the right, we're not going to look

9
00:00:48,621 --> 00:00:54,423
at, at all. So, everything to the left of
i is in ascending order everything to the

10
00:00:54,423 --> 00:01:00,319
right we haven't seen at all yet. So now,
when we increment i, well, in this case

11
00:01:00,319 --> 00:01:05,258
it's already an order, we don't have
anything else to do. In the third case

12
00:01:05,258 --> 00:01:10,599
now, when i at the third entry in the
array. Now, we start a index j and we move

13
00:01:10,599 --> 00:01:16,750
that starting at i to the left and what we
need to do is just exchange the five with

14
00:01:16,750 --> 00:01:21,867
every element to its left that's greater.
So, first we exchange it with the ten.

15
00:01:21,867 --> 00:01:27,358
It's still not in place so we exchange it
with the seven. Now, we get to the

16
00:01:27,358 --> 00:01:32,288
beginning array, of the array and once
we've done that or we've hit a smaller

17
00:01:32,288 --> 00:01:38,342
element then we have everybody to the left
of i in order. [cough] So now we increment

18
00:01:38,342 --> 00:01:44,080
i again and we come to the three. Again,
we exchange as long as the card

19
00:01:44,080 --> 00:01:50,862
immediately to the left is greater. And
once we've done that, then we have

20
00:01:50,862 --> 00:01:55,515
everything to the left of i in ascending
order. Now, in this case, we have the

21
00:01:55,515 --> 00:02:00,119
eight and we only have to exchange one and
now, it's got the seven to its left and

22
00:02:00,119 --> 00:02:05,506
everything is in order. So, we've achieved
putting it in order with less work in this

23
00:02:05,506 --> 00:02:11,015
case. We don't always have to go all the
way back to the beginning. For exchange it

24
00:02:11,015 --> 00:02:18,107
with everybody to its left that's greater,
until we find a smaller element done in

25
00:02:18,107 --> 00:02:25,227
its ascending order. Two has to go all the
way back to the begin ning [cough]. But

26
00:02:25,227 --> 00:02:32,729
then the very next one, the nine, has to
only go back one position. And the sixth

27
00:02:32,729 --> 00:02:40,802
has to go about halfway back. [cough] And
then, we have the entire array sorted.

28
00:02:40,802 --> 00:02:46,828
Again, we can look at insertion sort in
terms of invariants. Our pointers still

29
00:02:46,828 --> 00:02:51,906
scans from left to right but now, the
elements of the left of the pointer,

30
00:02:51,906 --> 00:02:56,729
including it, are in order. But the
elements to the right have not yet been

31
00:02:56,729 --> 00:03:01,423
seen at all. So, we have to look at the
code that's going to maintain that

32
00:03:01,423 --> 00:03:07,213
invariant as the pointer increments. Move
the pointer to the right, it's incremented

33
00:03:07,213 --> 00:03:12,227
again. Now, the invariant is broken
because the elements the element on the

34
00:03:12,227 --> 00:03:17,507
pointer is not in sorted order to put it
in sorted order, we have to move from

35
00:03:17,507 --> 00:03:22,356
right to left exchanging it with every
larger elements to its left. And that's

36
00:03:22,356 --> 00:03:29,235
with the code at the bottom does starts j
at i and decrements j exchanging j with

37
00:03:29,235 --> 00:03:36,608
the elements to its left. A(j) with the
element to its left, a(j) - one as long as

38
00:03:36,896 --> 00:03:43,200
a(j) is less than a(j) - one or j is
bigger than zero. And that immediately

39
00:03:43,200 --> 00:03:50,582
gives the, this code for insertion sort
which is similar to our code for selection

40
00:03:50,582 --> 00:03:56,563
sort and just as simple it gets two nested
for loops. Selection sort head to nested

41
00:03:56,563 --> 00:04:02,619
four loops a test to comparison and an
exchange inside the four loop. And that's

42
00:04:02,619 --> 00:04:09,050
a fine implementation of an elementary
sorting method. What about the analysis of

43
00:04:09,050 --> 00:04:15,882
insertion sort? It's more complicated. Our
proposition says that insertions sort to

44
00:04:15,882 --> 00:04:21,722
sort randomly ordered array with distinct
keys, it'll use about one-fourth N^2

45
00:04:21,722 --> 00:04:29,033
compares and about the same number when
one-fourth N^2 exchanges on the average.

46
00:04:29,033 --> 00:04:34,760
This is more complicated to prove. It
depends on the array being randomly

47
00:04:34,760 --> 00:04:41,008
ordered. And again, you can get a feeling
for where the propositioning comes from by

48
00:04:41,008 --> 00:04:46,212
looking at this N by N trace. Again, the
black elements are the ones that we

49
00:04:46,212 --> 00:04:51,968
compare and actually, there are also the
exchanges. And the red one is the one

50
00:04:51,968 --> 00:04:57,523
that's finally put in to place. And you
can see t hat for a large array that's

51
00:04:57,523 --> 00:05:02,578
randomly ordered, the element that we put
into place is going to go about half way

52
00:05:02,578 --> 00:05:07,780
back on the average. So, that means about
half the elements below the diagonal are

53
00:05:07,780 --> 00:05:13,839
going to black on the average cuz N^2 /
two below the diagonal, half of that is

54
00:05:13,839 --> 00:05:20,142
N^2 / four. The analysis, exact analysis
is not much more detailed than that. This

55
00:05:20,142 --> 00:05:27,073
is a bigger trace that shows again, about
half the elements below the diagonal or

56
00:05:27,073 --> 00:05:35,189
involved in the sort. [cough] Let's look
at in the animation. Since N^2 / four

57
00:05:35,191 --> 00:05:41,663
versus N^2 / two, insertion sort is going
to be about twice as fast as selection

58
00:05:41,663 --> 00:05:49,307
sort. So, we can do about twice as many
items in the trace in the same amount of

59
00:05:49,307 --> 00:05:57,037
time. It grabs an element, brings it back
into position, every time. So, it's an

60
00:05:57,037 --> 00:06:04,068
animation for randomly ordered items. Now
insertion sort does depend on the initial

61
00:06:04,068 --> 00:06:11,012
order of the data. Let's look at the best
case and the worst case which are

62
00:06:11,012 --> 00:06:17,175
certainly outliers. If the array happens
to be already sorted all insertion sort

63
00:06:17,175 --> 00:06:22,759
does is really to validate that each
element that's got a smaller element to

64
00:06:22,759 --> 00:06:28,079
its left so it does no exchanges and it
gets the sorting job done with just N -

65
00:06:28,079 --> 00:06:33,818
one compares. On the other hand, if the
array is in descending order N is no

66
00:06:33,818 --> 00:06:40,373
duplicates, then every element goes all
the way back. It makes N^2 / two compares

67
00:06:40,373 --> 00:06:46,717
and N^2 / two exchanges. So in the first
case is much, much faster than selection

68
00:06:46,717 --> 00:06:52,307
sort linear instead of quadratic. In the
second case, it's slower than an selection

69
00:06:52,307 --> 00:06:58,162
sort cuz it uses about the same number of
compares but it uses many more exchanges.

70
00:06:58,162 --> 00:07:05,131
So, let's see that in the animation. So,
this is when the items come in, in reverse

71
00:07:05,131 --> 00:07:10,968
order. Now, every time [cough] it, it gets
a new item, that's to exchange it all the

72
00:07:10,968 --> 00:07:17,505
way back to the beginning. Same kind of
dynamic characteristic is selection sort

73
00:07:17,505 --> 00:07:24,048
except for every step, iIt's not just
comparing, it's also exchanging which

74
00:07:24,048 --> 00:07:30,539
makes it even slower in practice. So, this
is the bad case that we wouldn't like to

75
00:07:30,539 --> 00:07:36,654
see in th e practical application but
there's also a good case that actually we

76
00:07:36,654 --> 00:07:42,356
take advantage of in plenty of practical
applications. And that has to do with when

77
00:07:42,356 --> 00:07:47,555
the array is partially sorted. To talk
about this in a quantitative way, we

78
00:07:47,555 --> 00:07:53,333
define what's called an inversion. An
inversion is just a pair of keys that are

79
00:07:53,333 --> 00:07:59,345
out of order in the array. So this array
has six inversions, T and R are out of

80
00:07:59,345 --> 00:08:05,633
order cuz R should go before T. T and P
are out of order and so forth. This array

81
00:08:05,633 --> 00:08:11,864
has six inversions. And we define array to
be partially sorted if its number of

82
00:08:11,864 --> 00:08:18,042
inversions is linear, if it's less than
some constant times N. And partially,

83
00:08:18,042 --> 00:08:23,954
sorted arrays appear often in practice.
For example, if you have a large array

84
00:08:23,954 --> 00:08:30,344
with just a few that's sorted except for
just a few unsorted elements appended at

85
00:08:30,344 --> 00:08:36,313
the end it's going to be [cough] partially
sorted. Or another case is if you only

86
00:08:36,313 --> 00:08:41,340
have a few entries out of place, the array
is going to be partially sorted. These

87
00:08:41,340 --> 00:08:45,891
types of things rise often in practical
applications and what's interesting about

88
00:08:45,891 --> 00:08:50,825
insertion sort is that it runs in linear
time for partially sorted arrays. And the

89
00:08:50,825 --> 00:08:56,262
proof is the number of comparisons and the
number of exchanges is equal to the number

90
00:08:56,262 --> 00:09:01,632
of, number of exchanges is equal to the
number of inversions and then there's an

91
00:09:01,632 --> 00:09:07,028
extra compare for every element except the
first. So, let's look at how that looks in

92
00:09:07,028 --> 00:09:12,041
the animation. Here's a partially sorted
array and you can see that insertion sorts

93
00:09:12,041 --> 00:09:17,042
quickly gets the job done. We're going to
take advantage of this in a little bit

94
00:09:17,042 --> 00:09:27,092
later in this lecture. That's insertion
sort, our second elementary sorting
